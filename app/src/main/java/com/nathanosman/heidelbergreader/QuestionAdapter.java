package com.nathanosman.heidelbergreader;

import android.content.Context;
import android.os.AsyncTask;
import android.support.annotation.Nullable;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;

import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.ref.WeakReference;
import java.lang.reflect.Type;

/**
 * RecyclerView adapter that loads and displays a list of questions
 */
class QuestionAdapter extends RecyclerView.Adapter<QuestionAdapter.ViewHolder> {

    /**
     * Interface for navigation events generated by the adapter
     */
    interface Listener {
        void onLoaded();
        void onNavigate(Question question);
    }

    private Context mContext;
    private Listener mListener;

    private String mErrorMessage;
    private Question[] mQuestions;

    private View.OnClickListener mOnClickListener = new View.OnClickListener() {

        @Override
        public void onClick(View view) {
            mListener.onNavigate((Question) view.getTag());
        }
    };

    /**
     * Task for parsing the JSON containing the questions
     */
    private static class LoadTask extends AsyncTask<Void, Void, LoadTask.Result> {

        /**
         * Result from the load operation
         */
        static class Result {

            String mErrorMessage;
            Question[] mQuestions;

            Result(String errorMessage) {
                mErrorMessage = errorMessage;
            }

            Result(Question[] questions) {
                mQuestions = questions;
            }
        }

        private WeakReference<QuestionAdapter> mAdapter;

        /**
         * Create a new loader for the adapter
         */
        LoadTask(QuestionAdapter adapter) {
            mAdapter = new WeakReference<>(adapter);
        }

        @Override
        protected Result doInBackground(Void... voids) {
            Gson gson = new Gson();
            try {
                JsonReader reader = new JsonReader(
                        new InputStreamReader(
                                mAdapter.get().mContext.getAssets().open(
                                        "questions.json"
                                )
                        )
                );
                Type questionsType = new TypeToken<Question[]>() {}.getType();
                return new LoadTask.Result((Question[]) gson.fromJson(reader, questionsType));
            } catch (IOException | JsonParseException e) {
                return new LoadTask.Result(e.getMessage());
            }
        }

        @Override
        protected void onPostExecute(LoadTask.Result result) {
            QuestionAdapter adapter = mAdapter.get();
            adapter.mErrorMessage = result.mErrorMessage;
            adapter.mQuestions = result.mQuestions;

            // If questions were loaded, indicate that the underlying data has changed
            if (adapter.mQuestions != null) {
                adapter.notifyDataSetChanged();
            }

            // Indicate that everything was loaded
            adapter.mListener.onLoaded();
        }
    }

    /**
     * Create a new question adapter
     * @param context use this context for loading the questions
     * @param listener notification for navigation events
     */
    QuestionAdapter(Context context, Listener listener) {
        mContext = context;
        mListener = listener;

        // Load the questions
        new LoadTask(this).execute();
    }

    /**
     * Retrieve an error message (if applicable)
     */
    @Nullable
    String getErrorMessage() {
        return mErrorMessage;
    }

    /**
     * View holder for an individual question
     */
    static class ViewHolder extends RecyclerView.ViewHolder {

        private TextView mNumber;
        private TextView mTitle;
        private TextView mSummary;

        ViewHolder(View itemView) {
            super(itemView);

            mNumber = itemView.findViewById(R.id.question_list_number);
            mTitle = itemView.findViewById(R.id.question_list_title);
            mSummary = itemView.findViewById(R.id.question_list_summary);
        }
    }

    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        return new ViewHolder(
                LayoutInflater.from(parent.getContext()).inflate(
                        R.layout.question_list_content,
                        parent,
                        false
                )
        );
    }

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {

        // Retrieve the question for the specified index
        Question question = mQuestions[position];

        // Populate the view holder with the question data
        holder.mNumber.setText(mContext.getString(R.string.list_question_number, question.getNumber()));
        holder.mTitle.setText(question.getQuestion());
        holder.mSummary.setText(question.getAnswer());

        holder.itemView.setTag(question);
        holder.itemView.setOnClickListener(mOnClickListener);
    }

    @Override
    public int getItemCount() {
        return mQuestions != null ? mQuestions.length : 0;
    }
}
